@startuml
skinparam class {
  BackgroundColor White
  BorderColor Black
  FontSize 12
  FontStyle Bold
}

class User {
  - id: long
  - username: string
  - password: string
  - roles: Set<Role>
}

class UserRepository {
  + findByUsername(String username): Optional<User>
}

class UserService {
  - userRepository: UserRepository
  - jwtTokenProvider: JwtTokenProvider
  + UserService(UserRepository userRepository, PasswordEncoder passwordEncoder)
  + registerUser(String username, String password, List<String> roles): User
  + findByUsername(String username): Optional<User>
}

class JwtTokenProvider {
  - secretKey: String
  - validityInMilliseconds: long
  + createToken(String username, List<String> roles): String
  + resolveToken(HttpServletRequest request) : string
  + validateToken(String): boolean
}

class AuthController {
  - userService: UserService
  - jwtTokenProvider: JwtTokenProvider
  - authenticationManager: AuthenticationManager
  + AuthController(UserService userService, JwtTokenProvider jwtTokenProvider, AuthenticationManager authenticationManager)
  + register(@RequestBody UserDTO userDTO): ResponseEntity<String>
  + login(@RequestBody UserDTO userDTO): ResponseEntity<Map<String, String>>
}

class PasswordResetController {
  + passwordReset(@RequestBody PasswordResetDTO passwordResetDTO): ResponseEntity<String>
}

class Role {
  - id: integer
  - name: string
  - description: string
}

class RoleRepository {
  + findAll(): List<Role>
  + findById(id: integer): Role
  + save(role: Role): Role
  + delete(role: Role): void
}

class SecurityConfig {
  - roles: List<Role>
  + getRoles(): List<Role>
  + addRole(role: Role): void
  + removeRole(role: Role): void
}

User --* Role : "has roles"
User "uses" --* UserRepository : "repository for"
UserService "depends on" --* UserRepository : "user data"
UserService "uses" --* JwtTokenProvider : "token provider"
AuthController "depends on" --* UserService : "user service"
AuthController "uses" --* JwtTokenProvider : "token provider"
AuthController "uses" --* AuthenticationManager : "auth manager"
AuthController <|-- "extends" PasswordResetController
RoleRepository --* Role : "manages"
SecurityConfig --* Role : "has roles"

note "User Registration and Login" as N1
N1 ..> AuthController
@enduml